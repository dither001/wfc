import { RotateClockwise, RotateCounterClockwise } from "./tile.js";
export class Module {
    constructor(name, path, tileData, degrees = 0) {
        this.name = name;
        this.tileData = tileData;
        this.canvas = document.createElement('canvas');
        const radians = degrees * Math.PI / 180;
        console.log(radians);
        const image = document.createElement('img');
        image.addEventListener('load', () => {
            this.canvas.width = image.width;
            this.canvas.height = image.height;
            const ctx = this.canvas.getContext('2d');
            // rotate from center pivot
            ctx.translate(this.canvas.width / 2, this.canvas.height / 2);
            ctx.rotate(radians);
            ctx.translate(-this.canvas.width / 2, -this.canvas.height / 2);
            ctx.drawImage(image, 0, 0);
        });
        image.setAttribute('src', path);
        switch (degrees) {
            case 90:
                this.tileData = RotateClockwise(tileData);
                break;
            case 180:
                this.tileData = RotateClockwise(tileData);
                this.tileData = RotateClockwise(tileData);
                break;
            case 270:
                this.tileData = RotateCounterClockwise(tileData);
                break;
            case 0:
            default:
                break;
        }
        for (let key in tileData) {
            const arr = tileData[key];
            this.tileData[key] = arr.map(id => {
                return generateId(id, degrees);
            });
        }
        this.name = generateId(name, degrees);
    }
}
function generateId(name, degrees) {
    return `${name}_${degrees.toString()}`;
}
export const PossibleRotations = [0, 90, 180, 270];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsibW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBWSxlQUFlLEVBQUUsc0JBQXNCLEVBQUUsa0JBQWU7QUFFM0UsTUFBTSxPQUFPLE1BQU07SUFJakIsWUFBbUIsSUFBWSxFQUFFLElBQVksRUFBUyxRQUFpQixFQUFFLFVBQWtCLENBQUM7UUFBekUsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUF1QixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ3JFLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUvQyxNQUFNLE9BQU8sR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBcUIsQ0FBQztRQUNoRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFekMsMkJBQTJCO1lBQzNCLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzdELEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9ELEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWhDLFFBQVEsT0FBTyxFQUFFO1lBQ2YsS0FBSyxFQUFFO2dCQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNO1lBQ1IsS0FBSyxHQUFHO2dCQUNOLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUMsTUFBTTtZQUNSLEtBQUssR0FBRztnQkFDSixJQUFJLENBQUMsUUFBUSxHQUFHLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUNuRCxNQUFNO1lBQ1IsS0FBSyxDQUFDLENBQUM7WUFDUDtnQkFDRSxNQUFNO1NBQ1Q7UUFFRCxLQUFLLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUN4QixNQUFNLEdBQUcsR0FBYSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNoQyxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFFRCxTQUFTLFVBQVUsQ0FBQyxJQUFZLEVBQUUsT0FBZTtJQUMvQyxPQUFPLEdBQUcsSUFBSSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlsZURhdGEsIFJvdGF0ZUNsb2Nrd2lzZSwgUm90YXRlQ291bnRlckNsb2Nrd2lzZSB9IGZyb20gJy4vdGlsZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTW9kdWxlIHtcclxuXHJcbiAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nLCBwdWJsaWMgdGlsZURhdGE6VGlsZURhdGEsIGRlZ3JlZXM6IG51bWJlciA9IDApIHtcclxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblxyXG4gICAgY29uc3QgcmFkaWFucyA9IGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgY29uc29sZS5sb2cocmFkaWFucyk7XHJcblxyXG4gICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKSBhcyBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgICAgdGhpcy5jYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgICAgLy8gcm90YXRlIGZyb20gY2VudGVyIHBpdm90XHJcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgICAgY3R4LnJvdGF0ZShyYWRpYW5zKTtcclxuICAgICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy5jYW52YXMud2lkdGggLyAyLCAtdGhpcy5jYW52YXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCBwYXRoKTtcclxuXHJcbiAgICBzd2l0Y2ggKGRlZ3JlZXMpIHtcclxuICAgICAgY2FzZSA5MDpcclxuICAgICAgICB0aGlzLnRpbGVEYXRhID0gUm90YXRlQ2xvY2t3aXNlKHRpbGVEYXRhKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAxODA6XHJcbiAgICAgICAgdGhpcy50aWxlRGF0YSA9IFJvdGF0ZUNsb2Nrd2lzZSh0aWxlRGF0YSk7XHJcbiAgICAgICAgdGhpcy50aWxlRGF0YSA9IFJvdGF0ZUNsb2Nrd2lzZSh0aWxlRGF0YSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjcwOlxyXG4gICAgICAgICAgdGhpcy50aWxlRGF0YSA9IFJvdGF0ZUNvdW50ZXJDbG9ja3dpc2UodGlsZURhdGEpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIDA6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIHRpbGVEYXRhKSB7XHJcbiAgICAgIGNvbnN0IGFycjogc3RyaW5nW10gPSB0aWxlRGF0YVtrZXldO1xyXG4gICAgICB0aGlzLnRpbGVEYXRhW2tleV0gPSBhcnIubWFwKGlkID0+IHtcclxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVJZChpZCwgZGVncmVlcyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubmFtZSA9IGdlbmVyYXRlSWQobmFtZSwgZGVncmVlcyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKG5hbWU6IHN0cmluZywgZGVncmVlczogbnVtYmVyKSB7XHJcbiAgcmV0dXJuIGAke25hbWV9XyR7ZGVncmVlcy50b1N0cmluZygpfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBQb3NzaWJsZVJvdGF0aW9ucyA9IFswLCA5MCwgMTgwLCAyNzBdOyJdfQ==