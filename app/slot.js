export class Slot {
    constructor(allModules, x, y) {
        this.x = x;
        this.y = y;
        this.possibleTiles = {
            up: new Set(),
            right: new Set(),
            down: new Set(),
            left: new Set(),
        };
        this.possibleModules = allModules.slice();
        this.UpdatePossibleTiles();
    }
    ReduceEntropy() {
        const index = Math.floor(Math.random() * this.possibleModules.length);
        this.possibleModules.splice(index, 1);
        this.UpdatePossibleTiles();
    }
    UpdatePossibleTiles() {
        this.possibleTiles = {
            up: new Set(),
            right: new Set(),
            down: new Set(),
            left: new Set(),
        };
        this.possibleModules.forEach(module => {
            if (module.tileData.up) {
                module.tileData.up.forEach((s) => this.possibleTiles.up.add(s));
            }
            if (module.tileData.right) {
                module.tileData.right.forEach((s) => this.possibleTiles.right.add(s));
            }
            if (module.tileData.down) {
                module.tileData.down.forEach((s) => this.possibleTiles.down.add(s));
            }
            if (module.tileData.left) {
                module.tileData.left.forEach((s) => this.possibleTiles.left.add(s));
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbInNsb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLElBQUk7SUFVZixZQUFZLFVBQW9CLEVBQVMsQ0FBUSxFQUFTLENBQVE7UUFBekIsTUFBQyxHQUFELENBQUMsQ0FBTztRQUFTLE1BQUMsR0FBRCxDQUFDLENBQU87UUFQbEUsa0JBQWEsR0FBRztZQUNkLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBVTtZQUNyQixLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQVU7WUFDeEIsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFVO1lBQ3ZCLElBQUksRUFBRSxJQUFJLEdBQUcsRUFBVTtTQUN4QixDQUFDO1FBR0EsSUFBSSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUc7WUFDbkIsRUFBRSxFQUFFLElBQUksR0FBRyxFQUFVO1lBQ3JCLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBVTtZQUN4QixJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQVU7WUFDdkIsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFVO1NBQ3hCLENBQUM7UUFDRixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO2dCQUN0QixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9EO1lBQ0QsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFDekIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyRTtZQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3hCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkU7WUFDRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO2dCQUN4QixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25FO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGUgfSBmcm9tICcuL21vZHVsZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2xvdCB7XHJcbiAgcG9zc2libGVNb2R1bGVzOiBNb2R1bGVbXTtcclxuXHJcbiAgcG9zc2libGVUaWxlcyA9IHtcclxuICAgIHVwOiBuZXcgU2V0PHN0cmluZz4oKSxcclxuICAgIHJpZ2h0OiBuZXcgU2V0PHN0cmluZz4oKSxcclxuICAgIGRvd246IG5ldyBTZXQ8c3RyaW5nPigpLFxyXG4gICAgbGVmdDogbmV3IFNldDxzdHJpbmc+KCksXHJcbiAgfTtcclxuXHJcbiAgY29uc3RydWN0b3IoYWxsTW9kdWxlczogTW9kdWxlW10sIHB1YmxpYyB4Om51bWJlciwgcHVibGljIHk6bnVtYmVyKSB7XHJcbiAgICB0aGlzLnBvc3NpYmxlTW9kdWxlcyA9IGFsbE1vZHVsZXMuc2xpY2UoKTtcclxuICAgIHRoaXMuVXBkYXRlUG9zc2libGVUaWxlcygpO1xyXG4gIH1cclxuXHJcbiAgUmVkdWNlRW50cm9weSgpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5wb3NzaWJsZU1vZHVsZXMubGVuZ3RoKTtcclxuICAgIHRoaXMucG9zc2libGVNb2R1bGVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB0aGlzLlVwZGF0ZVBvc3NpYmxlVGlsZXMoKTtcclxuICB9XHJcblxyXG4gIFVwZGF0ZVBvc3NpYmxlVGlsZXMoKSB7XHJcbiAgICB0aGlzLnBvc3NpYmxlVGlsZXMgPSB7XHJcbiAgICAgIHVwOiBuZXcgU2V0PHN0cmluZz4oKSxcclxuICAgICAgcmlnaHQ6IG5ldyBTZXQ8c3RyaW5nPigpLFxyXG4gICAgICBkb3duOiBuZXcgU2V0PHN0cmluZz4oKSxcclxuICAgICAgbGVmdDogbmV3IFNldDxzdHJpbmc+KCksXHJcbiAgICB9O1xyXG4gICAgdGhpcy5wb3NzaWJsZU1vZHVsZXMuZm9yRWFjaChtb2R1bGUgPT4ge1xyXG4gICAgICBpZiAobW9kdWxlLnRpbGVEYXRhLnVwKSB7XHJcbiAgICAgICAgbW9kdWxlLnRpbGVEYXRhLnVwLmZvckVhY2goKHMpPT50aGlzLnBvc3NpYmxlVGlsZXMudXAuYWRkKHMpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobW9kdWxlLnRpbGVEYXRhLnJpZ2h0KSB7XHJcbiAgICAgICAgbW9kdWxlLnRpbGVEYXRhLnJpZ2h0LmZvckVhY2goKHMpPT50aGlzLnBvc3NpYmxlVGlsZXMucmlnaHQuYWRkKHMpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobW9kdWxlLnRpbGVEYXRhLmRvd24pIHtcclxuICAgICAgICBtb2R1bGUudGlsZURhdGEuZG93bi5mb3JFYWNoKChzKT0+dGhpcy5wb3NzaWJsZVRpbGVzLmRvd24uYWRkKHMpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobW9kdWxlLnRpbGVEYXRhLmxlZnQpIHtcclxuICAgICAgICBtb2R1bGUudGlsZURhdGEubGVmdC5mb3JFYWNoKChzKT0+dGhpcy5wb3NzaWJsZVRpbGVzLmxlZnQuYWRkKHMpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59Il19