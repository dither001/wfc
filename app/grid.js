import { Slot } from "./slot.js";
const adjacentOffsets = [
    { x: -1, y: 0, direction: 'left' },
    { x: 1, y: 0, direction: 'right' },
    { x: 0, y: -1, direction: 'up' },
    { x: 0, y: 1, direction: 'down' },
];
const oppositeDirection = {
    'left': 'right',
    'right': 'left',
    'up': 'down',
    'down': 'up',
};
export class Grid {
    constructor(modules, width, height) {
        this.width = width;
        this.height = height;
        this.slots = [];
        const length = width * height;
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                this.slots.push(new Slot(modules, x, y));
            }
        }
    }
    *indices() {
        for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
                const index = x + this.width * y;
                yield {
                    x,
                    y,
                    index,
                    slot: this.slots[index],
                };
            }
        }
    }
    *adjacentIndices(x, y) {
        for (const offset of adjacentOffsets) {
            const ox = offset.x + x;
            if (ox < 0 || ox >= this.width) {
                continue;
            }
            const oy = offset.y + y;
            if (oy < 0 || oy >= this.height) {
                continue;
            }
            const index = ox + this.width * oy;
            yield {
                x: ox,
                y: oy,
                index,
                slot: this.slots[index],
                direction: offset.direction,
                oppositeDirection: oppositeDirection[offset.direction],
            };
        }
    }
    getSlot(x, y) {
        x = Math.floor(x);
        y = Math.floor(y);
        const index = x + this.width * y;
        return this.slots[index];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbImdyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxrQkFBZTtBQUc5QixNQUFNLGVBQWUsR0FBRztJQUN0QixFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUU7SUFDbEMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtJQUNsQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFDaEMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRTtDQUNsQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBZ0M7SUFDckQsTUFBTSxFQUFFLE9BQU87SUFDZixPQUFPLEVBQUUsTUFBTTtJQUNmLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLElBQUk7Q0FDYixDQUFDO0FBRUYsTUFBTSxPQUFPLElBQUk7SUFFZixZQUFZLE9BQWlCLEVBQVMsS0FBYSxFQUFTLE1BQWM7UUFBcEMsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7UUFEMUUsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUM7WUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBQztnQkFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsQ0FBRSxPQUFPO1FBQ1AsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUM7WUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUM7Z0JBQ2xDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDakMsTUFBTTtvQkFDSixDQUFDO29CQUNELENBQUM7b0JBQ0QsS0FBSztvQkFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7aUJBQ3hCLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVELENBQUUsZUFBZSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3BDLEtBQUssTUFBTSxNQUFNLElBQUksZUFBZSxFQUFFO1lBQ3BDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDOUIsU0FBUzthQUNWO1lBRUQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUMvQixTQUFTO2FBQ1Y7WUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDbkMsTUFBTTtnQkFDSixDQUFDLEVBQUUsRUFBRTtnQkFDTCxDQUFDLEVBQUUsRUFBRTtnQkFDTCxLQUFLO2dCQUNMLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztnQkFDdkIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO2dCQUMzQixpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO2FBQ3ZELENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDMUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbG90IH0gZnJvbSAnLi9zbG90JztcclxuaW1wb3J0IHsgTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGUnO1xyXG5cclxuY29uc3QgYWRqYWNlbnRPZmZzZXRzID0gW1xyXG4gIHsgeDogLTEsIHk6IDAsIGRpcmVjdGlvbjogJ2xlZnQnIH0sXHJcbiAgeyB4OiAxLCB5OiAwLCBkaXJlY3Rpb246ICdyaWdodCcgfSxcclxuICB7IHg6IDAsIHk6IC0xLCBkaXJlY3Rpb246ICd1cCcgfSxcclxuICB7IHg6IDAsIHk6IDEsIGRpcmVjdGlvbjogJ2Rvd24nIH0sXHJcbl07XHJcblxyXG5jb25zdCBvcHBvc2l0ZURpcmVjdGlvbjogeyBbaW5kZXg6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICdsZWZ0JzogJ3JpZ2h0JyxcclxuICAncmlnaHQnOiAnbGVmdCcsXHJcbiAgJ3VwJzogJ2Rvd24nLFxyXG4gICdkb3duJzogJ3VwJyxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkIHtcclxuICBzbG90czogU2xvdFtdID0gW107XHJcbiAgY29uc3RydWN0b3IobW9kdWxlczogTW9kdWxlW10sIHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0O1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKyl7XHJcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKyl7XHJcbiAgICAgICAgdGhpcy5zbG90cy5wdXNoKG5ldyBTbG90KG1vZHVsZXMsIHgsIHkpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgKiBpbmRpY2VzKCkge1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKXtcclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4Kyspe1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0geCArIHRoaXMud2lkdGggKiB5O1xyXG4gICAgICAgIHlpZWxkIHtcclxuICAgICAgICAgIHgsXHJcbiAgICAgICAgICB5LFxyXG4gICAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgICBzbG90OiB0aGlzLnNsb3RzW2luZGV4XSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAqIGFkamFjZW50SW5kaWNlcyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgZm9yIChjb25zdCBvZmZzZXQgb2YgYWRqYWNlbnRPZmZzZXRzKSB7XHJcbiAgICAgIGNvbnN0IG94ID0gb2Zmc2V0LnggKyB4O1xyXG4gICAgICBpZiAob3ggPCAwIHx8IG94ID49IHRoaXMud2lkdGgpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgb3kgPSBvZmZzZXQueSArIHk7XHJcbiAgICAgIGlmIChveSA8IDAgfHwgb3kgPj0gdGhpcy5oZWlnaHQpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgaW5kZXggPSBveCArIHRoaXMud2lkdGggKiBveTtcclxuICAgICAgeWllbGQge1xyXG4gICAgICAgIHg6IG94LFxyXG4gICAgICAgIHk6IG95LFxyXG4gICAgICAgIGluZGV4LFxyXG4gICAgICAgIHNsb3Q6IHRoaXMuc2xvdHNbaW5kZXhdLFxyXG4gICAgICAgIGRpcmVjdGlvbjogb2Zmc2V0LmRpcmVjdGlvbixcclxuICAgICAgICBvcHBvc2l0ZURpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bb2Zmc2V0LmRpcmVjdGlvbl0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRTbG90KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcclxuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xyXG4gICAgY29uc3QgaW5kZXggPSB4ICsgdGhpcy53aWR0aCAqIHk7XHJcbiAgICByZXR1cm4gdGhpcy5zbG90c1tpbmRleF07XHJcbiAgfVxyXG59Il19